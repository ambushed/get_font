plugins {
	id 'java-library'
}

configurations{
	antTaskPlatform
}

dependencies {
	implementation(libs.swingx16)

	implementation 'com.jetbrains.intellij.java:java-gui-forms-rt:241.14494.308'
	antTaskPlatform 'com.jetbrains.intellij.java:java-compiler-ant-tasks:241.14494.308'
}

task compileJava(type: JavaCompile, overwrite: true, dependsOn: configurations.implementation.getTaskDependencyFromProjectDependency(true, 'compileOnly')) {
	options.encoding = 'UTF-8'
	doLast {
		ant.taskdef name: 'javac2', classname: 'com.intellij.ant.Javac2', classpath: configurations.antTaskPlatform.asPath
		ant.javac2 srcdir: sourceSets.main.java.srcDirs.join(':'),
				classpath: sourceSets.main.compileClasspath.asPath,
				destdir: sourceSets.main.output.classesDirs[0],
				source: sourceCompatibility,
				target: targetCompatibility,
				includeAntRuntime: false,
				encoding: 'UTF-8'
	}
}

jar {
	manifest {
		attributes("Class-Path": configurations.runtimeClasspath.collect { it.getName() }.join(' '))
        }
}

tasks.withType(Tar){
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip){
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

//jar {
//	doLast {
//		// Fixes IDEA-298989.
//		fileTree("$buildDir/instrumented/instrumentCode") { include("**/*Form.class") }.files.forEach { delete(it) }
//	}
//}

task fatJar(type: Jar) {
	manifest {
		attributes 'Main-Class': 'com.programa17.mmm.risk.management.RiskManagementManager'
	}
	archiveClassifier = "all"
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	with jar
}